Master + Workstation
65.2.188.131

Worker
3.111.245.206
===========================================
What is Services?
-----------------------------------------

kubectl create service clusterip my-cs --tcp=5678:80

kubectl create service nodeport my-ns --tcp=5678:80

  245  mkdir rajesh
  246  cd rajesh/
  247  clear
  248  ls
  249  vi pod1.yaml
  250  vi pod2.yaml
  251  clear
  252  ls
  253  kubectl get pods
  254  kubectl delete deploy my-dep
  255  clear
  256  kubectl get pods
  257  kubectl delete pod nginx rajesh
  258  kubectl get pods
  259  clea
  260  clear
  261  ls
  262  kubectl apply -f pod1.yaml
  263  kubectl apply -f pod2.yaml
  264  clear
  265  kubectl get pods -o wide
  266  curl http://192.168.1.20
  267  curl http://192.168.1.21
  268  kubectl create svc -h
  269  clear
  270  kubectl create svc clustorip -h
  271  kubectl create svc clusterip -h
  272  clear
  273  kubectl create service clusterip my-cs --tcp=5678:80
  274  kubectl get svc
  275  kubectl describe svc my-cs
  276  cler
  277  clear
  278  kubectl get pods --show-labels
  279  kubectl get svc --show-labels
  280  kubectl edit svc my-cs
  281  kubectl get pods --show-labels
  282  kubectl get svc --show-labels
  283  kubectl describe svc my-cs
  284  clear
  285  kubectl edit svc my-cs
  286  clear
  287  kubectl describe svc my-cs
  288  kubectl get svc
  289  curl http://10.102.142.50:5678
  290  clear
  291  watch curl http://10.102.142.50:5678
  292  clear
  293  ls
  294  kubectl get svc
  295  kubectl create svc nodeport -h
  296  clear
  297  kubectl create service nodeport my-ns --tcp=5678:80
  298  kubectl get svc
  299  kubectl describe svc my-ns
  300  kubectl edit svc my-ns
  301  clear
  302  kubectl describe svc my-ns
  303  clear
  304  kubectl get svc
  305  curl http://10.100.87.218:5678
==============================================
Persistance Volume, Claim, Storage Classes, Access Claim in a Pod
Stateful Sets
==============================================

				AWS							Kubernetes
----------------------------------------------------------------------------------
Admin			ADD STORAGE						Add a Pool of Vol		- pv				
----------------------------------------------------------------------------------
User - Create 	volume						Claim a vol 			- pvc
----------------------------------------------------------
User - Attached	VM(Compute)					attach vol to POD		- pod.sepc.volume
----------------------------------------------------------
User - MOUNT		VM(Compute)					mount volume to container
----------------------------------------------------------
USE IT


How to can we create pv and using which storage?
===================================================
Types of Storage
-------------------
BLOCK 			EBS
NETWORK == file	EFS
OBJECT			S3
=======================================================

awsElasticBlockStore (deprecated)		BLOCK
azureDisk (deprecated)				BLOCK
azureFile (deprecated)				NETWORK
cephfs
cinder (deprecated)				BLOCK
configMap						CLUSTOR - etcd - key - value
downwardAPI
emptyDir
fc (fibre channel)
gcePersistentDisk (deprecated)		BLOCK
gitRepo (deprecated)
glusterfs (deprecated)
hostPath
iscsi
local
nfs
persistentVolumeClaim
portworxVolume (deprecated)
projected
rbd
secret						CLUSTOR - etcd - key - value
vsphereVolume (deprecated)			BLOCK

How Kubernetes understand these storage tech?


https://www.devopsschool.com/blog/persistentvolume-persistentvolumeclaim-volumes-using-hostpath/



kind: PersistentVolume
apiVersion: v1
metadata:
  name: hostpath1
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/devopsschool"

kind: PersistentVolume
apiVersion: v1
metadata:
  name: hostpath2
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/devopsschool"




apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvchostpath1
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi


apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvchostpath2
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

kind: Pod
apiVersion: v1
metadata:
  name: task-pv-pod
spec:
  containers:
    - name: task-pv-container
      image: scmgalaxy/nginx-devopsschoolv1
      ports:
        - containerPort: 80
          name: "http-server"
      volumeMounts:
        - mountPath: "/usr/share/nginx/html"
          name: task-pv-storage
  volumes:
    - name: task-pv-storage
      persistentVolumeClaim:
        claimName: pvchostpath2
======================================================================================
how to get pod???
--------------------------------------------------------------------------------------
Pod							1 POD
ReplicationController			N POD && Actual == Desire
ReplicaSet					N POD && Actual == Desire
Deployment					ReplicaSet + versioning + Rollout + Rollback
DaemonSet					Max 1 POD at each worker

StatefulSet
https://www.devopsschool.com/blog/explained-kubernetes-kubernetes-statefulset-with-example/
------------------------------------------------------------
Create a POD in order
				POD1 -> POD2 -> POD3 -> POD4
delete a POD in order
				POD1 -> POD2 -> POD3 -> POD4
Fixed patter in podnme
				POD-1, POD-2, POD-3, POD-4
Volume Allocation
		POD-1 === PVC-1
		POD-2 === PVC-2	
		
		POD-4 === PVC-4

		POD-3 === PVC-3	



apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  serviceName: "nginx"
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: k8s.gcr.io/nginx-slim:0.8
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
============================================================
Kubernetes Authetication

			cert
			token


Kubernetes Authorization == RBAC



get”, 
“list”, 
“watch”, 
“create”, 
“update”, 
“patch”, 
“delete”]

kubectl config set-credentials employee --client-certificate=/root/rajesh/employee.crt  --client-key=/root/rajesh/employee.key


kubectl config set-context employee-context --cluster=kubernetes --namespace=office --user=employee


kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: office
  name: deployment-manager
rules:
- apiGroups: ["", "extensions", "apps"]
  resources: ["deployments", "replicasets", "pods"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"] # You can also use ["*"]

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: deployment-manager-binding
  namespace: office
subjects:
- kind: User
  name: employee
  apiGroup: ""
roleRef:
  kind: Role
  name: deployment-manager
  apiGroup: ""







